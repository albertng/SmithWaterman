/* Run-time parameterizable substitution matrix
 */

alphabet = {A, C, G, T, N};
const unsigned BITWIDTH = 18;
dpmat signed<BITWIDTH> M[][];
dpmat signed<BITWIDTH> I[][];
dpmat signed<BITWIDTH> D[][];
cell(signed<BITWIDTH> sub_mat[5][5],
     signed<BITWIDTH> gap_open,
     signed<BITWIDTH> gap_extend,
     signed<BITWIDTH> N_penalty) {
  signed<BITWIDTH> substitute;
  if (query_char == N || ref_char == N) {
    substitute = N_penalty;
  } else {
    substitute = sub_mat[query_char][ref_char];
  }
  I[row][col] = max(M[row - 1][col] + gap_open,
                    I[row - 1][col] + gap_extend);
  D[row][col] = max(M[row][col - 1] + gap_open,
                    D[row][col - 1] + gap_extend);
  M[row][col] = max(0,
                    M[row - 1][col - 1] + substitute,
                    I[row][col],
                    D[row][col]);
}
condition(signed<BITWIDTH> threshold) {
  if (M[row][col] >= threshold) {
    report();
  }
}
