/* Run-time parameterizable penalties with ambiguous base
 */

alphabet = {A, C, G, T, N};
const unsigned BITWIDTH = 10;
dpmat signed<BITWIDTH> score[][];
cell(signed<BITWIDTH> match, signed<BITWIDTH> mismatch,
     signed<BITWIDTH> insert, signed<BITWIDTH> delete,
     signed<BITWIDTH> N_penalty) {
  signed<BITWIDTH> substitute;
  if (query_char == N || ref_char == N) {
    substitute = N_penalty;
  } else if (query_char == ref_char) {
    substitute = match;
  } else {
    substitute = mismatch;
  }
  score[row][col] = max(0,
                        score[row - 1][col - 1] + substitute,
                        score[row - 1][col] + insert,
                        score[row][col - 1] + delete);
}
